VAR CONSTANT
	ACTUATOR_BYTE_NOT_ACTIV : USINT := 2#0000000000000000;
	RESET_ITEM_MEM_WEIGHT : USINT := 0;
END_VAR
VAR
	ItemWeightMeasured : USINT;
	ItemWeight : USINT;
	ItemWeightChoosen : USINT := 12;
	QuantityLeftStorage : UINT;
	MotorReqAcc : UINT := 700;
	MotorReqDec : UINT := 700;
	MotorReqPosition : UINT := 0;
	MOTOR_DIST_LEFT : {REDUND_UNREPLICABLE} UINT := 90;
	MOTOR_DIST_RIGHT : {REDUND_UNREPLICABLE} UINT := 320;
	QuantityRightStorage : UINT;
	MotorReqVel : {REDUND_UNREPLICABLE} UINT := 300;
	TimerTonDetect : TON;
	TimerTonCamera : TON;
	TimerTonActuator : TON;
	TIME_TON_DETECT : TIME := T#2S;
END_VAR
VAR CONSTANT
	TIME_TON_CAMERA : TIME := T#4S;
	TIME_TON_ACTUATOR : TIME := T#500MS;
END_VAR
VAR
	StringState : STRING[80];
	StringRecognisedModel : STRING[80];
	MotorVel : REAL;
	State : ProgramStatesEnum := STOP;
	MotorPos : LREAL;
	ActuatorByte : INT := 2#0000000000000000;
END_VAR
VAR CONSTANT
	ACTUATOR_BYTE_SORT : INT := 2#0000000000000001;
	ACTUATOR_BYTE_PUSH : INT := 2#0000000000000100;
END_VAR
VAR
	CTU_QuantityRight : CTU;
	CTU_QuantityLeft : CTU;
	AddToRight : BOOL;
	ActuatorNotPushing : BOOL;
	AddToLeft : BOOL;
	ActuatorSorting : BOOL := FALSE;
	ActuatorPushing : BOOL := FALSE;
	ActuatorNotSorting : BOOL;
	CTU_Reset_Right : BOOL;
	SortLeftBR : BOOL := FALSE; (*Gdy ustawiona na 1 sortuje BR na lewo, a AS na prawo*)
	SortLeftMin : BOOL := FALSE; (*Mniejsze detale sortowane s¹ na lewo gdy 1, a wieksze na prawo gdy 1.*)
	Start : BOOL := FALSE;
	Stop : BOOL := FALSE;
	TimerCameraPicDone : BOOL;
	MotorPower : BOOL := FALSE;
	MotorMoveDone : BOOL;
	TimerTonActuatorIn : BOOL := FALSE;
	MotorMoveAbsolute : BOOL := FALSE;
	MotorInPosition : BOOL;
	MotorHome : BOOL;
	CTU_Reset_Left : BOOL;
	IsEnglishSelected : BOOL;
	TimerActuatorOut : BOOL;
	TimerAfterDetect : BOOL;
	MotorResetError : BOOL := FALSE;
	ItemDetected : BOOL := FALSE;
END_VAR
